---
- name: Allow Port K8s services
  firewalld:
    permanent: yes
    immediate: yes
    port: "{{item.port}}/{{item.proto}}"
    state: "{{item.state}}"

  with_items:
    - {port: "6443", proto: "tcp", state: "enabled"}
    - {port: "2379-2380", proto: "tcp", state: "enabled"}
    - {port: "10250-10252", proto: "tcp", state: "enabled"}
    - {port: "10255", proto: "tcp", state: "enabled"}
    - {port: "80", proto: "tcp", state: "enabled"}
    - {port: "443", proto: "tcp", state: "enabled"}


- name: Allow Workers access and Allow containers access to localhost
  firewalld:
    rich_rule: "{{item}}"
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
    - 'rule family=ipv4 source address=10.0.1.11/32 accept'
    - 'rule family=ipv4 source address=10.0.1.12/32 accept'
    - 'rule family=ipv4 source address=172.17.0.0/16 accept'
    

- name: Pull images Kubeadm
  command: kubeadm config images pull  

- name: Kubeadm init pod network
  command: kubeadm init --pod-network-cidr 192.169.0.0/16

### Generamos el token para que los workers puedan unirse al cluster y dicha salida la registra en una variable "join_command"


- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command

### El contenido de la variable join_command, la escribimos en un fichero local denominado join-command
### Tendra un contenido similar a este
### kubeadm join 10.0.1.10:6443 --token jvl3w5.kkecbd1fvz9xewli --discovery-token-ca-cert-hash sha256:2439d0002f59560dc8b55217ee541e0ae829fc048c9bc5e5df7b3b20df8b2996 

- name: Copy join command to local file
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
  become: no

  

- name: Setup kubeconfig for root
  command: "{{ item }}"
  with_items:
    - mkdir -p /root/.kube
    - cp /etc/kubernetes/admin.conf /root/.kube/config
    - chown root:root /root/.kube/config